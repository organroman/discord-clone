import type { FileRouter, inferEndpointInput } from "./internal/types";
type UploadFilesOptions<TRouter extends FileRouter> = {
    [TEndpoint in keyof TRouter]: {
        endpoint: TEndpoint;
        onUploadProgress?: ({ file, progress, }: {
            file: string;
            progress: number;
        }) => void;
        input?: inferEndpointInput<TRouter[TEndpoint]>;
        files: File[];
    };
}[keyof TRouter];
export type UploadFileResponse = {
    /**
     * @deprecated
     * use `name` instead
     */
    fileName: string;
    name: string;
    /**
     * @deprecated
     * use `size` instead
     */
    fileSize: number;
    size: number;
    /**
     * @deprecated
     * use `key` instead
     */
    fileKey: string;
    key: string;
    /**
     * @deprecated
     * use `url` instead
     */
    fileUrl: string;
    url: string;
};
export declare const DANGEROUS__uploadFiles: <TRouter extends FileRouter>(opts: UploadFilesOptions<TRouter>, config?: {
    url?: string;
}) => Promise<UploadFileResponse[]>;
export declare const genUploader: <TRouter extends FileRouter>() => (opts: UploadFilesOptions<TRouter>, config?: {
    url?: string;
}) => Promise<UploadFileResponse[]>;
export declare const classNames: (...classes: (string | boolean)[]) => string;
export declare const generateMimeTypes: (fileTypes: string[]) => string[] | undefined;
export declare const generateClientDropzoneAccept: (fileTypes: string[]) => {
    [k: string]: never[];
} | undefined;
export {};
//# sourceMappingURL=client.d.ts.map