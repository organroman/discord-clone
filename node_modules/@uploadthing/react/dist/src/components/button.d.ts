import type { ErrorMessage, FileRouter } from "uploadthing/server";
import type { UploadthingComponentProps } from "../types";
import type { ContentField, StyleField } from "../utils/styles";
type ButtonStyleFieldCallbackArgs = {
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
};
export type UploadButtonProps<TRouter extends FileRouter> = UploadthingComponentProps<TRouter> & {
    appearance?: {
        container?: StyleField<ButtonStyleFieldCallbackArgs>;
        button?: StyleField<ButtonStyleFieldCallbackArgs>;
        allowedContent?: StyleField<ButtonStyleFieldCallbackArgs>;
    };
    content?: {
        button?: ContentField<ButtonStyleFieldCallbackArgs>;
        allowedContent?: ContentField<ButtonStyleFieldCallbackArgs>;
    };
    className?: string;
};
/**
 * @example
 * <UploadButton<OurFileRouter>
 *   endpoint="someEndpoint"
 *   onUploadComplete={(res) => console.log(res)}
 *   onUploadError={(err) => console.log(err)}
 * />
 */
export declare function UploadButton<TRouter extends FileRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadButtonProps<TRouter>): import("react/jsx-runtime").JSX.Element;
export {};
//# sourceMappingURL=button.d.ts.map