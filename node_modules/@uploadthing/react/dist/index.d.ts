import * as react_jsx_runtime from 'react/jsx-runtime';
import { FileRouter, inferErrorShape, inferEndpointInput, ErrorMessage } from 'uploadthing/server';
import { UploadThingError } from '@uploadthing/shared';
import { UploadFileResponse } from 'uploadthing/client';
import { CSSProperties, ReactNode } from 'react';

type UploadthingComponentProps<TRouter extends FileRouter> = {
    [TEndpoint in keyof TRouter]: {
        endpoint: TEndpoint;
        onUploadProgress?: (progress: number) => void;
        onClientUploadComplete?: (res?: UploadFileResponse[]) => void;
        onUploadError?: (error: UploadThingError<inferErrorShape<TRouter>>) => void;
    } & (undefined extends inferEndpointInput<TRouter[TEndpoint]> ? {} : {
        input: inferEndpointInput<TRouter[TEndpoint]>;
    });
}[keyof TRouter];

type StyleField<CallbackArg> = string | CSSProperties | ((arg: CallbackArg) => string | CSSProperties);
type ContentField<CallbackArg> = ReactNode | ((arg: CallbackArg) => ReactNode);

type DropzoneStyleFieldCallbackArgs = {
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
    isDragActive: boolean;
};
type UploadDropzoneProps<TRouter extends FileRouter> = UploadthingComponentProps<TRouter> & {
    appearance?: {
        container?: StyleField<DropzoneStyleFieldCallbackArgs>;
        uploadIcon?: StyleField<DropzoneStyleFieldCallbackArgs>;
        label?: StyleField<DropzoneStyleFieldCallbackArgs>;
        allowedContent?: StyleField<DropzoneStyleFieldCallbackArgs>;
        button?: StyleField<DropzoneStyleFieldCallbackArgs>;
    };
    content?: {
        uploadIcon?: ContentField<DropzoneStyleFieldCallbackArgs>;
        label?: ContentField<DropzoneStyleFieldCallbackArgs>;
        allowedContent?: ContentField<DropzoneStyleFieldCallbackArgs>;
        button?: ContentField<DropzoneStyleFieldCallbackArgs>;
    };
    className?: string;
};
declare function UploadDropzone<TRouter extends FileRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadDropzoneProps<TRouter>): react_jsx_runtime.JSX.Element;

type ButtonStyleFieldCallbackArgs = {
    ready: boolean;
    isUploading: boolean;
    uploadProgress: number;
    fileTypes: string[];
};
type UploadButtonProps<TRouter extends FileRouter> = UploadthingComponentProps<TRouter> & {
    appearance?: {
        container?: StyleField<ButtonStyleFieldCallbackArgs>;
        button?: StyleField<ButtonStyleFieldCallbackArgs>;
        allowedContent?: StyleField<ButtonStyleFieldCallbackArgs>;
    };
    content?: {
        button?: ContentField<ButtonStyleFieldCallbackArgs>;
        allowedContent?: ContentField<ButtonStyleFieldCallbackArgs>;
    };
    className?: string;
};
/**
 * @example
 * <UploadButton<OurFileRouter>
 *   endpoint="someEndpoint"
 *   onUploadComplete={(res) => console.log(res)}
 *   onUploadError={(err) => console.log(err)}
 * />
 */
declare function UploadButton<TRouter extends FileRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadButtonProps<TRouter>): react_jsx_runtime.JSX.Element;

declare function Uploader<TRouter extends FileRouter>(props: FileRouter extends TRouter ? ErrorMessage<"You forgot to pass the generic"> : UploadthingComponentProps<TRouter>): react_jsx_runtime.JSX.Element;
declare function generateComponents<TRouter extends FileRouter>(): {
    UploadButton: (props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadButtonProps<TRouter>) => react_jsx_runtime.JSX.Element;
    UploadDropzone: (props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadDropzoneProps<TRouter>) => react_jsx_runtime.JSX.Element;
    Uploader: (props: FileRouter extends TRouter ? "You forgot to pass the generic" : UploadthingComponentProps<TRouter>) => react_jsx_runtime.JSX.Element;
};

export { UploadButton, UploadDropzone, Uploader, UploadthingComponentProps, generateComponents };
